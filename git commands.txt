Git add <file/.> - добавление файлов в Stage
Git commit -m <message> - коммит
Git merge <branch> - замерджить в текущую ветку branch
Если возникли конфликты - открываем файл и там оставляем то, что хотим оставить после merge (при этом нужно удалить все системные строки)
Git checkout <branch> - переключиться на ветку branch. С флагом -b ветка создастся
Git rm --cached <file> - удалить файл из Stage. То есть если сделать после этого комит, то этот файл пропадет в комите.НЕ ЗАТРАГИВАЕМ ФАЙЛЫ В WORKING DIRECTORY (то есть у тебя в папке все останется как и было)
Git restore --staged <file> - обновить файл в Stage до состояния последнего комита. То есть если после этого сделать комит, то этот файл будет таким же как и в предыдущем комите. НЕ ЗАТРАГИВАЕМ ФАЙЛЫ В WORKING DIRECTORY (то есть у тебя в папке все останется как и было)
Git checkout <file> - обновить файлы в WORKING DIRECTORY (то есть в папке на компе) до текущего состояния stage.
Git push <remote name> <remote branch name> - запушить текущую ветку в ремоут ветку
Git pull <remote branch name> - запулить изменения из удаленного репозитория. НЕ ОБНОВЛЯЕТ WORKING DIRECTORY (НУЖНО СДЕЛАТЬ git checkout .)
Git clone <repository url> - клонировать удаленный репозиторий. Создает папку с уже инициализированным гитом